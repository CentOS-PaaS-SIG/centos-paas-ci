- debug:
    msg: "PaaS-sig Props: {{ item.prop }} [ {{ item.value }} ]"
  with_items:
    - { prop: 'project', value: "{{ project }}" }
    - { prop: 'version', value: "{{ version }}" }
    - { prop: 'bleeding_edge', value: "{{ bleeding_edge }}" }
    - { prop: 'force_build', value: "{{ force_build }}" }

- name: Start and enable docker service
  service:
    name: docker
    state: started
    enabled: yes

- name: check if build was already done
  shell: ls {{ openshift_repo_path}}/_output/local/releases/rpms/{{ project }}-{{ version }}.* | head -1
  args:
    chdir: "{{ openshift_repo_path }}"
  register: build_complete
  when: (force_build|bool == false)

- name: checkout origin version
  shell: git checkout v{{ version }}
  args:
    chdir: "{{ openshift_repo_path }}"
  when: (force_build|bool == true or (build_complete.stdout == "" and bleeding_edge|bool == false))

- name: run the build-rpm-release.sh
  shell: OS_BUILD_ENV_PRESERVE=_output/local hack/env OS_BUILD_SRPM=y RPM_BUILD_OPTS="--define 'dist .el7'" OS_ONLY_BUILD_PLATFORMS='linux/amd64' hack/build-rpm-release.sh
  args:
    chdir: "{{ openshift_repo_path }}"
  when: (force_build|bool == true or build_complete.stdout == "")

- name: check for repo file
  stat:
    path: " {{ web_docroot }}/{{ project }}/{{ arch }}/{{ project }}-local-release.repo"
  register: repo_file

- name: copy artifacts if they don't exist
  shell: cp -r {{ openshift_repo_path }}/_output/local/releases/rpms/* {{ web_docroot }}/{{ project }}/{{ arch }}/
  args:
    chdir: "{{ openshift_repo_path }}"
  when: repo_file.stat.exists == false
